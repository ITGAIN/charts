# Default values for s4dbs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# frontendConfigMode should not be changed unless you are advised to by support team
frontendConfigMode: false

### START * not needed if frontendConfigMode set to false ###
# serverHostname is the public available dns / server name - e.g. route in an openshift 
serverHostname: localhost ##enter dns name of route here (will be created later) ##

# servicePort is the public service /rest-api port for the frontend to redirect correctly - change to 8080 (port of reverse proxy) if not using a route or ingress up front s4dbs
servicePort: 80

# serverProtokol depends on your configmap for reverse proxy / nginx
serverProtokol: http

# grafanaPort is the public grafana port for the frontend to redirect correctly - change to 8080/grafana (port of reverse proxy) if not using a route or ingress up front s4dbs
grafanaPort: 80/grafana

### END * not needed if frontendConfigMode set to false ###

# pdb is the overall repository (aka pdb) configuration
pdb:
  pdbDbName: speedgain
  pdbHost: s4dbs-postgres-service
  pdbPort: 5432
  pdbUser: postgres

# s4dbsCollectorDeployment defines collector image and varas
s4dbsCollectorDeployment:
  image: docker.io/itgainis/s4dbs_collector:2.0.0
  spgLogLevel: INFO
  requests_memory: "2Gi"
  requests_cpu: "0.5"
  limits_memory: "8Gi"
  limits_cpu: "4"

# s4dbsPostgresDeployment defines timescale image and varas
s4dbsPostgresDeployment: 
  image: docker.io/itgainis/s4dbs_timescaledb:2.0.0
  persistentVolumeClaimName: s4dbs-postgres-pv-claim
  persistentVolumeClaimSize: 100G
  storageClassName: something #change to map you storage provider, like managed-csi on AZURE or thin on OpenShift
  requests_memory: "1Gi"
  requests_cpu: "1"
  limits_memory: "16Gi"
  limits_cpu: "8"

# s4dbsServiceDeployment defines service image and varas
s4dbsServiceDeployment: 
  image: docker.io/itgainis/s4dbs_service:2.0.0
  port: 8080
  requests_memory: "256Mi"
  requests_cpu: "0.5"
  limits_memory: "4Gi"
  limits_cpu: "2"

# s4dbsGrafanaDeployment defines grafana image and varas
s4dbsGrafanaDeployment: 
  image: docker.io/itgainis/s4dbs_grafana:2.0.0
  port: 3000
  anonymousLogin: false
  requests_memory: "256Mi"
  requests_cpu: "0.5"
  limits_memory: "2Gi"
  limits_cpu: "2"
  
# s4dbsFrontendDeployment defines frontend image and varas
s4dbsFrontendDeployment: 
  image: docker.io/itgainis/s4dbs_frontend:2.0.0
  port: 8080
  requests_memory: "128Mi"
  requests_cpu: "0.5"
  limits_memory: "2Gi"
  limits_cpu: "1"

# s4dbsReverseDeployment defines reverse proxy image and varas 
s4dbsReverseDeployment:
  enabled: true #set to false if you want to use own reverse proxy / ingress nginx 
  external_traffic_service_type: LoadBalancer # set to Load Balancer, ClusterIP or NodePort to specify remote access type
  image: docker.io/nginx:1.27
  port: 8080
  publicPort: 80
  requests_memory: "256Mi"
  requests_cpu: "0.5"
  limits_memory: "2Gi"
  limits_cpu: "1"
